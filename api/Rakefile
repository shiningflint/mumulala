namespace :db do
  require 'sequel'
  require 'dotenv'

  ENV['RACK_ENV'] = ENV['RACK_ENV'] || 'development'
  APP_ENV = Dotenv.load
  Sequel.extension :migration

  DB = lambda do
    Sequel.connect(
      adapter: 'postgres',
      host: APP_ENV["DB_HOST_#{ENV['RACK_ENV'].upcase}"],
      database: APP_ENV["DB_#{ENV['RACK_ENV'].upcase}"],
      user: APP_ENV["DB_USER_#{ENV['RACK_ENV'].upcase}"],
      password: APP_ENV["DB_PASSWORD_#{ENV['RACK_ENV'].upcase}"]
    )
  end

  desc 'Prints current schema version'
  task :version do
    version = get_file_version()
    puts "Schema version: #{version}"
  end

  desc 'Perform migration up to latest migration available'
  task :migrate do
    Sequel::Migrator.run(DB.call, 'migrations')
    Rake::Task['db:version'].execute
  end

  desc "Perform rollback to specified target or full rollback as default"
  task :rollback, :target do |t, args|
    version = get_file_version(-2)
    version = if args[:target]
                args[:target]
              else
                get_file_version(-2)
              end

    Sequel::Migrator.run(DB.call, 'migrations', target: version)
    Rake::Task['db:version'].execute
  end

  desc "Perform migration reset (full rollback and migration)"
  task :reset do
    Sequel::Migrator.run(DB.call, "migrations", target: 0)
    Sequel::Migrator.run(DB.call, "migrations")
    Rake::Task['db:version'].execute
  end

  def get_file_version(reverse_index = -1)
    version_db = DB.call
    if version_db.tables.include?(:schema_migrations) &&
       version_db[:schema_migrations].all.length > 0 &&
       version_db[:schema_migrations].all[reverse_index]
        filename = version_db[:schema_migrations].all[reverse_index][:filename]
        /^\d+(?=_)/.match(filename).to_s.to_i
    else
      0
    end
  end
end

namespace :seed do
  desc "Seed recipes"
  task :recipes do
    recipes = [
      { name: 'spaghetti', description: 'Bolognese' },
      { name: 'さば塩', description: 'さば塩焼き' },
      { name: 'ゴーヤチャンプル', description: 'Go ya boyz' },
    ]
    recipes.each do |recipe|
      DB.call[:recipes].insert(recipe)
    end
  end
end

namespace :shell do
  desc "Starts an irb shell"
  task :irb do
    trap('INT', "IGNORE")
    sh "irb -r ./models"
  end
end
